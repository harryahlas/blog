window_stride_ms = 10
)
ds_validation <- data_generator(
df[-id_train,],
batch_size =1,# 32,
shuffle = FALSE,
window_size_ms = 30,
window_stride_ms = 10
)
sess <- tf$Session()
batch <- next_batch(ds_train)
str(sess$run(batch))
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
readClipboard()
devtools::create("C:\\Development\\github\\test")
# Create data
library(RMariaDB)
library(tidyverse)
# Connect to database stored on localhost
HRSAMPLE <- dbConnect(RMariaDB::MariaDB(), user='newuser', password='newuser', dbname='hrsample', host='localhost')
# Retrieve tables
employeeinfo_table <- dbGetQuery(HRSAMPLE, "SELECT *  FROM employeeinfo")
deskhistory_table  <- dbGetQuery(HRSAMPLE, "SELECT *  FROM deskhistory")
# Put your data files into the data-raw folder
save(employeeinfo_table, file = "data-raw/employeeinfo_table.rda")
# Put your data files into the data-raw folder
save(employeeinfo_table, file = "C:\\Development\\github\\test\\data-raw/employeeinfo_table.rda")
save(deskhistory_table,  file = "C:\\Development\\github\\testdata-raw/deskhistory_table.rda")
save(deskhistory_table,  file = "C:\\Development\\github\\test\\data-raw/deskhistory_table.rda")
library(test)
library(test)
employeeinfo_table
remove.packages("test")
library(test)
devtools::install_github("harryahlas/test")
?install_github
devtools::install_github("harryahlas/test")
employeeinfo_table
library(test)
employeeinfo_table
install.packages("hrsample")
devtools::create("C:\\Development\\github\\hrsample")
devtools::install_github("smithjd/sqlpetr")
library(sqlpetr)
sp_docker_remove_container("cattle")
sp_check_that_docker_is_up()
sp_make_simple_pg("cattle")
sp_check_that_docker_is_up()
sp_docker_containers_tibble()
con <- sp_get_postgres_connection(
host = "localhost",
port = 5439,
user = "postgres",
password = "postgres",
dbname = "postgres",
seconds_to_test = 30,
connection_tab = TRUE
)
remotes::install_github("smithjd/sqlpetr", ref = "wait-for-postgresql", force = TRUE)
library(sqlpetr)
sp_docker_remove_container("cattle")
sp_check_that_docker_is_up()
sp_make_simple_pg("cattle")
sp_docker_remove_container("cattle")
sp_check_that_docker_is_up()
sp_make_simple_pg("cattle")
library(tidyverse)
library(openxlsx)
library(readxl)
library(httr)
temp_file <- tempfile(fileext = ".xlsx")
req <- GET("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/data/JohnsonLitigationResearch.xlsx",
# write result to disk
write_disk(path = temp_file))
input_data <- read_excel(temp_file)
input_data <- input_data %>%
select(-`Job Name`) %>%
mutate(`Date of incident or notification` =
as.Date(`Date of incident or notification`))
setwd(readClipboard())
devtools::install_github("harryahlas/hrsample")
library(hrsample)
hrsampleCreateSQLite("my_db.sqlite3")
HRSAMPLE <- dbConnect(RSQLite::SQLite(),
'my_db.sqlite3')
dbListTables(HRSAMPLE)
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_sql
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_sql
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_sql
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_sql
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_sql
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_sql
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_sql
test_sql
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_sql
test_sql <- gsub("33066", "41678", test_sql)
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_df
View(input_data)
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_sql
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_df
mvdr_sql_placeholder <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr.sql")
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[2],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[2],
x = .)
df_one_row <- dbGetQuery(HRSAMPLE, mvdr_sql)
mvdr_sql_placeholder
mvdr_sql
mvdr_sql_placeholder <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr.sql")
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[1],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[1],
x = .)
df_one_row <- dbGetQuery(HRSAMPLE, mvdr_sql)
df_one_row
df <- tibble()
for (i in 1:nrow(input_data)) {
# Replace placeholders with employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[i],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[i],
x = .)
# Retrieve data to temporary table
df_temp <- dbGetQuery(HRSAMPLE, mvdr_sql)
df <- bind_rows(df, df_temp)
}
output <- input_data %>%
left_join(df %>% select(-desk_id),
by = c("Date of incident or notification",
"Employee Number" = "employee_num")) %>%
replace_na(list(job_name = "not with company at this time")) %>%
rename(`Job Name` = job_name)
df_temp$`Date of incident or notification` <- as.Date(df_temp$`Date of incident or notification`)
df <- tibble()
for (i in 1:nrow(input_data)) {
# Replace placeholders with employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[i],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[i],
x = .)
# Retrieve data to temporary table
df_temp <- dbGetQuery(HRSAMPLE, mvdr_sql)
df_temp$`Date of incident or notification` <- as.Date(df_temp$`Date of incident or notification`)
df <- bind_rows(df, df_temp)
}
output <- input_data %>%
left_join(df %>% select(-desk_id),
by = c("Date of incident or notification",
"Employee Number" = "employee_num")) %>%
replace_na(list(job_name = "not with company at this time")) %>%
rename(`Job Name` = job_name)
wb <- createWorkbook()
addWorksheet(wb, "HR data needed with output")
writeDataTable(wb, 1, output)
saveWorkbook(wb, "Johnson litigation research with job_name.xlsx", TRUE)
View(output)
deskhistory_table %>% filter(employee_num == 7187)
library(tidyverse)
library(openxlsx)
library(readxl)
library(httr)
temp_file <- tempfile(fileext = ".xlsx")
req <- GET("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/data/JohnsonLitigationResearch.xlsx",
# write result to disk
write_disk(path = temp_file))
input_data <- read_excel(temp_file)
input_data <- input_data %>%
select(-`Job Name`) #%>%
# mutate(`Date of incident or notification` =
#          as.Date(`Date of incident or notification`))
library(hrsample)
hrsampleCreateSQLite("my_db.sqlite3")
HRSAMPLE <- dbConnect(RSQLite::SQLite(),
'my_db.sqlite3')
dbListTables(HRSAMPLE)
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_df
mvdr_sql_placeholder <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr.sql")
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[1],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[1],
x = .)
df_one_row <- dbGetQuery(HRSAMPLE, mvdr_sql)
df_one_row
df <- tibble()
for (i in 1:nrow(input_data)) {
# Replace placeholders with employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[i],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[i],
x = .)
# Retrieve data to temporary table
df_temp <- dbGetQuery(HRSAMPLE, mvdr_sql)
# df_temp$`Date of incident or notification` <- as.Date(df_temp$`Date of incident or notification`)
df <- bind_rows(df, df_temp)
}
output <- input_data %>%
left_join(df %>% select(-desk_id),
by = c("Date of incident or notification",
"Employee Number" = "employee_num")) %>%
replace_na(list(job_name = "not with company at this time")) %>%
rename(`Job Name` = job_name)
hrsampleCreateSQLite
output <- input_data %>%
left_join(df %>% select(-desk_id),
by = c("Date of incident or notification",
"Employee Number" = "employee_num")) %>%
replace_na(list(job_name = "not with company at this time")) %>%
rename(`Job Name` = job_name)
wb <- createWorkbook()
input_data <- input_data %>%
select(-`Job Name`) #%>%
input_data <- input_data %>%
select(-`Job Name`) %>%
mutate(`Date of incident or notification` =
as.Date(`Date of incident or notification`))
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_df
mvdr_sql_placeholder <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr.sql")
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[1],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[1],
x = .)
df_one_row <- dbGetQuery(HRSAMPLE, mvdr_sql)
df_one_row
df <- tibble()
for (i in 1:nrow(input_data)) {
# Replace placeholders with employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[i],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[i],
x = .)
# Retrieve data to temporary table
df_temp <- dbGetQuery(HRSAMPLE, mvdr_sql)
# df_temp$`Date of incident or notification` <- as.Date(df_temp$`Date of incident or notification`)
df <- bind_rows(df, df_temp)
}
for (i in 1:nrow(input_data)) {
# Replace placeholders with employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[i],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[i],
x = .)
# Retrieve data to temporary table
df_temp <- dbGetQuery(HRSAMPLE, mvdr_sql)
df_temp$`Date of incident or notification` <- as.Date(df_temp$`Date of incident or notification`)
df <- bind_rows(df, df_temp)
}
temp_file <- tempfile(fileext = ".xlsx")
req <- GET("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/data/JohnsonLitigationResearch.xlsx",
# write result to disk
write_disk(path = temp_file))
input_data <- read_excel(temp_file)
input_data <- input_data %>%
select(-`Job Name`) %>%
mutate(`Date of incident or notification` =
as.Date(`Date of incident or notification`))
dbListTables(HRSAMPLE)
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(HRSAMPLE, test_sql)
test_df
mvdr_sql_placeholder <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr.sql")
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[1],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[1],
x = .)
df_one_row <- dbGetQuery(HRSAMPLE, mvdr_sql)
df_one_row
df <- tibble()
for (i in 1:nrow(input_data)) {
# Replace placeholders with employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[i],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[i],
x = .)
# Retrieve data to temporary table
df_temp <- dbGetQuery(HRSAMPLE, mvdr_sql)
df_temp$`Date of incident or notification` <- as.Date(df_temp$`Date of incident or notification`)
df <- bind_rows(df, df_temp)
}
output <- input_data %>%
left_join(df %>% select(-desk_id),
by = c("Date of incident or notification",
"Employee Number" = "employee_num")) %>%
replace_na(list(job_name = "not with company at this time")) %>%
rename(`Job Name` = job_name)
wb <- createWorkbook()
addWorksheet(wb, "HR data needed with output")
writeDataTable(wb, 1, output)
saveWorkbook(wb, "Johnson litigation research with job_name.xlsx", TRUE)
library(tidyverse)
library(openxlsx)
library(readxl)
library(httr)
temp_file <- tempfile(fileext = ".xlsx")
req <- GET("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/data/JohnsonLitigationResearch.xlsx",
# write result to disk
write_disk(path = temp_file))
input_data <- read_excel(temp_file)
input_data <- input_data %>%
select(-`Job Name`) %>%
mutate(`Date of incident or notification` =
as.Date(`Date of incident or notification`))
dbDisconnect(HRSAMPLE)
library(tidyverse)
library(openxlsx)
library(readxl)
library(httr)
temp_file <- tempfile(fileext = ".xlsx")
req <- GET("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/data/JohnsonLitigationResearch.xlsx",
# write result to disk
write_disk(path = temp_file))
input_data <- read_excel(temp_file)
input_data <- input_data %>%
select(-`Job Name`) %>%
mutate(`Date of incident or notification` =
as.Date(`Date of incident or notification`))
library(hrsample)
hrsampleCreateSQLite("my_db.sqlite3")
con <- dbConnect(RSQLite::SQLite(),
'my_db.sqlite3')
dbListTables(con)
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(con, test_sql)
test_df
mvdr_sql_placeholder <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr.sql")
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[1],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[1],
x = .)
df_one_row <- dbGetQuery(con, mvdr_sql)
df_one_row
df <- tibble()
for (i in 1:nrow(input_data)) {
# Replace placeholders with employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[i],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[i],
x = .)
# Retrieve data to temporary table
df_temp <- dbGetQuery(con, mvdr_sql)
df_temp$`Date of incident or notification` <- as.Date(df_temp$`Date of incident or notification`)
df <- bind_rows(df, df_temp)
}
output <- input_data %>%
left_join(df %>% select(-desk_id),
by = c("Date of incident or notification",
"Employee Number" = "employee_num")) %>%
replace_na(list(job_name = "not with company at this time")) %>%
rename(`Job Name` = job_name)
wb <- createWorkbook()
addWorksheet(wb, "HR data needed with output")
writeDataTable(wb, 1, output)
saveWorkbook(wb, "output/Johnson litigation research with job_name.xlsx", TRUE)
saveWorkbook(wb, "Johnson litigation research with job_name.xlsx", TRUE)
library(RCurl)
setwd("C:\\Development\\github\\blog")
blog_files_all <- list.files(getwd(),
#pattern=(".html"),
full.names=F,
recursive = TRUE)
# do not change this file or image files
blog_files <- blog_files_all[blog_files_all != "scripts/updateURLs.R"]
blog_files <- blog_files[grepl(blog_files,pattern = "/images/") != TRUE]
blog_files <- blog_files[grepl(blog_files,pattern = "jpg|png|gif") != TRUE]
pw <- "3myj5xh"
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
pw <- "3mypj5xh"
for (blog_file in blog_files_all) {
print(blog_file)
ftpUpload(blog_file,
paste0("sftp://edemise:",pw,"@boron.he.net/home/edemise/public_html/harry.ahlas.com/",
blog_file),
.opts = list(ftp.create.missing.dirs=TRUE)
)
}
library(tidyverse)
library(openxlsx)
library(readxl)
library(httr)
# Import data -------------------------------------------------------------
temp_file <- tempfile(fileext = ".xlsx")
req <- GET("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/data/JohnsonLitigationResearch.xlsx",
# write result to disk
write_disk(path = temp_file))
input_data <- read_excel(temp_file)
# Remove column that will be replaced and change date format
input_data <- input_data %>%
select(-`Job Name`) %>%
mutate(`Date of incident or notification` =
as.Date(`Date of incident or notification`))
library(hrsample)
hrsampleCreateSQLite("my_db.sqlite3")
# Connect to database -----------------------------------------------------
con <- dbConnect(RSQLite::SQLite(),
'my_db.sqlite3')
dbListTables(con)
# Run test query ----------------------------------------------------------
test_sql <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr_test.sql")
test_df <- dbGetQuery(con, test_sql)
test_df
test_sql
# Retrieve single row using placeholders ----------------------------------
# Import sql script with placeholders
mvdr_sql_placeholder <- read_file("https://raw.githubusercontent.com/harryahlas/sample-hr-database/master/scripts/mcdr.sql")
mvdr_sql_placeholder
# Replace placeholders with sample employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[1],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[1],
x = .)
# Retrieve data
df_one_row <- dbGetQuery(con, mvdr_sql)
df_one_row
# Retrieve all data using placeholder -------------------------------------
# Create empty tibble
df <- tibble()
for (i in 1:nrow(input_data)) {
# Replace placeholders with employee_num and date
mvdr_sql <- mvdr_sql_placeholder %>%
gsub(pattern = '%EMP_ID%',
replacement = input_data$`Employee Number`[i],
x = .) %>%
gsub(pattern = '%DATE_ID%',
replacement = input_data$`Date of incident or notification`[i],
x = .)
# Retrieve data to temporary table
df_temp <- dbGetQuery(con, mvdr_sql)
df_temp$`Date of incident or notification` <- as.Date(df_temp$`Date of incident or notification`)
df <- bind_rows(df, df_temp)
}
# Join retrieved data to input data ---------------------------------------
output <- input_data %>%
left_join(df %>% select(-desk_id),
by = c("Date of incident or notification",
"Employee Number" = "employee_num")) %>%
replace_na(list(job_name = "not with company at this time")) %>%
rename(`Job Name` = job_name)
# Export ------------------------------------------------------------------
wb <- createWorkbook()
addWorksheet(wb, "HR data needed with output")
writeDataTable(wb, 1, output)
saveWorkbook(wb, "Johnson litigation research with job_name.xlsx", TRUE)
dbDisconnect(con)
